import numpy as np

import constants as _c

from colors import bcolors as bc

# GLOBAL VARIABLES
matrix = np.array(_c.EMPTY_MATRIX.copy())

open_list = _c.EMPTY_LIST.copy()
closed_list = _c.EMPTY_LIST.copy()
tentative_routes_list = _c.EMPTY_LIST.copy()

row = -1
col = -1

under_green = bc.UNDERLINE + bc.OKGREEN

# ____ PRINTS ____


def printStatus(queens, candidates):
    print(bc.HEADER + 'Open Set ' + bc.ENDC, end=': ')
    printList(open_list)

    print(bc.HEADER + 'Closed Set ' + bc.ENDC, end=': ')
    printList(closed_list)

    print(bc.HEADER + 'Candidates ' + bc.ENDC, end=': ')
    aaaa = candidates.copy()
    printList(aaaa[::-1])

    print(bc.OKGREEN + 'Queens : ' + bc.ENDC, str(queens))


def printMatrixQueens(iterations, showRestrictions=False):
    print(bc.UNDERLINE + '________________________________________________________________________________________________________' + bc.ENDC)
    print(bc.OKCYAN + "\nIteration : " + str(iterations) + '\n' + bc.ENDC)

    if(len(closed_list) > 0):
        print(under_green + "\nPath:" + bc.ENDC + " ", end='')
        print(getIDs_V2(closed_list[-1]), '\n')

    for i in range(_c.N):
        print('| ', end='')
        for j_ in range(_c.N):
            cell = matrix[i][j_]
            if(showRestrictions and cell['R'] > 0):
                print(bc.WARNING + '~ ' + bc.ENDC, end='| ')
            elif(cell['Q'] == 1):
                print(bc.OKGREEN + 'Q ' + bc.ENDC, end='| ')
            else:
                print('  ', end='| ')
        print('\n')


def printList(listToPrint):
    print(bc.HEADER + '{' + bc.ENDC, end='')

    lenList = len(listToPrint)
    counter_ = 0
    for item in listToPrint:
        counter_ += 1
        print(bc.HEADER + '[' + bc.ENDC, end='')
        lenItem = len(item)
        count_list = 0
        for i_ in item:
            print(str(i_['ID']), end='')
            count_list += 1

            if(lenItem != count_list):
                print(', ', end='')

        if(lenList != counter_):
            print(bc.HEADER + ']' + bc.ENDC+', ', end='')

        else:
            print(bc.HEADER + ']' + bc.ENDC, end='')

    print(bc.HEADER + '}' + bc.ENDC, end='\n\n')

# ____ RE-SETS ____


def resetMatrix(followCell):
    for i in range(_c.N):
        for a in range(_c.N):
            matrix[i][a] = {'ID': matrix[i][a]['ID'],
                            'POS': matrix[i][a]['POS'],
                            'F': matrix[i][a]['F'],
                            'Q': 0,
                            'R': 0}

    for queen in followCell:
        global row, col
        row = queen['POS'][0]
        col = queen['POS'][1]

        setQueen(row, col)

        restrictions = getRestrictions()
        setRestriction(restrictions)


# ____ SETS ____

def setQueen(x, y):
    matrix[x][y]['Q'] = 1


def setRestriction(restrictions_list=[]):
    for i in range(_c.N):
        for j in range(_c.N):
            if(matrix[i][j]['ID'] in restrictions_list):
                matrix[i][j]['R'] = 1


def setFeed(restrictions_list=[]):
    for i in range(_c.N):
        for j in range(_c.N):
            if(matrix[i][j]['ID'] in restrictions_list):
                pos = matrix[i][j]['POS']
                length = getEndangeredCells(pos[0], pos[1])
                # print('ID> ', matrix[i][j]['ID'], ' [', length, ']')
                matrix[i][j]['F'] = length

# ____ GETS ____


def getCellsWithOutRestritionOrQueen():
    listWithOutRestrictionOrQueen = []
    for i in range(_c.N):
        for j in range(_c.N):
            cell = matrix[i][j]
            if(cell['R'] == 0 and cell['Q'] == 0):
                listWithOutRestrictionOrQueen.append(cell)
    return listWithOutRestrictionOrQueen


def getDiagonals(matrix, pos):
    row_d, col_d = pos
    nrows = len(matrix)
    ncols = len(matrix[0]) if nrows > 0 else 0
    # First diagonal
    d1_i, d1_j = nrows - 1 - max(row_d - col_d, 0), max(col_d - row_d, 0)
    d1_len = min(d1_i + 1, ncols - d1_j)
    diag1 = [matrix[d1_i - k][d1_j + k] for k in range(d1_len)]
    # Second diagonal
    t = min(row_d, ncols - col_d - 1)
    d2_i, d2_j = nrows - 1 - row_d + t, col_d + t
    d2_len = min(d2_i, d2_j) + 1
    diag2 = [matrix[d2_i - k][d2_j - k] for k in range(d2_len)]
    return (diag1, diag2)


def getIDs(array):
    ids_list = _c.EMPTY_LIST.copy()

    for item in array:
        if(item['ID'] != matrix[row][col]['ID']):
            ids_list.append(item['ID'])

    return ids_list


def getIDs_V2(array):
    ids_list = _c.EMPTY_LIST.copy()

    for item in array:
        ids_list.append(item['ID'])

    return ids_list


def getEndangeredCells(i, j):
    diagonals = getDiagonals(np.flipud(matrix), (i, j))
    diag_1 = getIDs_V2(diagonals[0])
    diag_2 = getIDs_V2(diagonals[1])

    num = matrix[i][j]['ID']

    if num in diag_1:
        diag_1.remove(num)
    if num in diag_2:
        diag_2.remove(num)

    list_restrictions = diag_1 + diag_2
    return len(list_restrictions)


def removeDuplicates(array):
    return list(dict.fromkeys(array))


def getRestrictions():
    cols = getIDs(matrix[:, col])
    rows = getIDs(matrix[row, :])

    diagonals = getDiagonals(np.flipud(matrix), (row, col))
    diag_1 = getIDs(diagonals[0])
    diag_2 = getIDs(diagonals[1])

    list_restrictions = cols + rows + diag_1 + diag_2
    list_restrictions.sort()

    return list_restrictions

# ____ SORT ____


def sortListByFeed(feedList):
    feedList.sort(key=lambda x: x['F'])
    return feedList


# ____ MAIN ____


def main():
    queens = 0
    iterations = 0
    soluctions = 0

    sortDecendents = [0]
    followCell = {}
    done = False

    # False | True
    showRestrictions = True
    show4Soluctions = True
    showSets = False

    printMatrixQueens(iterations, showRestrictions)

    printStatus(queens, [])

    while(done == False):
        try:
            iterations_loop = int(input(_c.ENTER_MSG))

            if(type(iterations_loop) == int):

                while(iterations_loop > 0):

                    iterations += 1
                    iterations_loop -= 1

                    if(len(open_list) == 0):
                        list_without_RQ = getCellsWithOutRestritionOrQueen()

                        list_Ids = getIDs_V2(list_without_RQ)
                        setFeed(list_Ids)

                        for itemSorted in sortListByFeed(list_without_RQ):
                            open_list.insert(len(open_list), [itemSorted])

                    myCell = open_list[0][-1]

                    queens = len(open_list[0])

                    closed_list.insert(len(closed_list), open_list[0])

                    currentPos = myCell['POS']

                    global row, col
                    row = currentPos[0]
                    col = currentPos[1]

                    followCell = closed_list[-1]

                    if(sortDecendents == []):
                        resetMatrix(followCell)
                    else:
                        resetMatrix(open_list[0])

                    if(len(open_list) > 0):
                        del open_list[0]

                    # printMatrixQueens(iterations, showRestrictions)

                    newDecendents = getCellsWithOutRestritionOrQueen()

                    sortDecendents = sortListByFeed(newDecendents)

                    # TODO Get ramdon cell with less feed

                    listNewsNodes = []

                    for decendet in sortDecendents:
                        b = followCell.copy()
                        b.append(decendet)
                        isNew = True
                        for aClosed in closed_list:
                            if(sorted(getIDs_V2(b)) == sorted(getIDs_V2(aClosed))):
                                isNew = False
                                break

                        if(isNew):
                            listNewsNodes.append(b)

                    candidates = listNewsNodes.copy()[::-1]

                    if(showSets):
                        printStatus(queens, candidates)

                    for cand in candidates:
                        open_list.insert(0, cand)

                    if(queens >= 6):
                        soluctions += 1
                        print(bc.OKCYAN + "\nCurrent Trajectory : " +
                              bc.ENDC, end='')
                        print(getIDs_V2(followCell), '\n')
                        print('Final Iteration', iterations, '\n')

                        printMatrixQueens(iterations, showRestrictions)
                        if(soluctions == 4 or show4Soluctions == False):
                            done = True
                            break

        except:
            enter_exit = input(_c.EXIT_MSG_)
            if(enter_exit == ''):
                print(_c.EXIT_MSG)
                break


main()
